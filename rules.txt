PROJECT RULES
This is a project of rules and regulations! Read this document thoroughly before starting work on the project!
As a friendly reminder, failure to follow the rules means I will track you down and [REDACTED].



Table of contents:
-Docstring Rules
-GUI Setup Method Rules
-Method Rules
-Class Structure Rules
-Final Remarks




Docstring Rules
All docstrings must follow the template given below:
/**
 * One-line summary of the method or class, followed by two "<br>" tags.
 *
 * Additional details of the method or class. This may span multiple lines.
 * If each line exceeds ~80 characters (where a significant portion of the text crosses the thin white line
 * on the right of the screen), any additional text must be on a new line.
 * Any new lines must use the "<br>" tag.
 *
 * One or two lines of important notice for clients, i.e. preconditions not enforceable by exceptions.
 * This section must contain "Helper to {parent method name}" if the method is a private helper to another method.
 * -If an important notice section is included, the additional details section must end with two "<br>" tags.
 *
 * @param parameter1 the first parameter, followed by a period. Then state any preconditions on the parameter
 * @param parameter2...
 * @return some value. Return value descriptions are required! Must come immediately after the parameters
 * @throws Exception... Newly thrown exceptions are required!
 * Exception description is not needed if throwing an Exception that an overridden function throws,
 * or if the Exception is unlikely to be thrown (i.e. ExecutionException and InterruptedException in a SwingWorker)
 *
 * NOTE: All parameter, return value, and exception entries must have a description, even if the associated values are trivial!
 */

Class docstrings need not include parameters, return values, or exception information.
Docstrings for fields can contain only a one-line summary.





GUI Setup Method Rules

Most, if not all, of the GUI setup methods in the main application class will return a JPanel.
The outputted JPanel may have a single-letter name, although this practice is not recommended.

All constraints must be declared before any JComponents are added.

When initializing a new JComponent, the declarations must come in the following order:
    Constructor of the JComponent
    Methods to modify the JComponent, in alphabetical order by method name. NOT included are methods using long lambda expressions
    Setup methods using lambda expressions, i.e. addActionListener
    Statements to modify the GridBagConstraints, in alphabetical order
    Statement to add the JComponent to the target JPanel

In a GridBagLayout,
components must have a gridx at least that of the previous component added,
and a gridy greater than that of the previous component.
Example:
    constraints.gridx=0;
    constraints.gridy=0;
    ...
    constraints.gridx=0;
    constraints.gridy=1;
    ...
    constraints.gridx=1;
    constraints.gridy=0;








Method Rules

Unless otherwise specified, or if the method is a setter method, all methods must not modify any of their inputs.

If a class constructor takes a non-primitive type as an input, the constructor must load the corresponding field with a
deep copy of the input.







Class Structure Rules
Classes must match the template below.

/**
 * Docstring that conforms to the Docstring Rules
 *
 * NOTE: Since class definitions have no inputs or return values,
 * a class docstring does not include any parameters, return values, or exceptions.
 */
 class MyClass... {

    Constants, whose names are in all caps, with a descriptive name.
        Must be declared in a logical order. If no logical order exists, declare in alphabetical order by variable name.

        Example:
        /**
        * The default user input, if none is provided. Cannot be null
        */
        final String DEFAULT_INPUT = "Hello world";

        /**
        * The maximum height for the application window. Must be positive
        */
        final int MAX_HEIGHT = 1000;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    Variable fields
        JComponent fields should come last.
        Must be declared in a logical order. If no logical order exists, declare in alphabetical order by variable name.


    NOTE: All constant and variable fields MUST HAVE DOCSTRINGS!

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


    Class constructor(s). If the class has multiple constructors, the most frequently used constructors are first.
        ALL CLASSES must have an explicitly defined constructor, even if the constructor does nothing.

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    Getter and setter methods, utility methods (i.e. toString)

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    doInBackground, if the class extends SwingWorker.

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    Additional non-main methods
        All additional methods should be in alphabetical order by the method's name.

        In the case of the main application, any methods to set up the GUI (that only the constructor calls) should come first.
        These methods may appear in the order in which the user sees them, not necessarily in alphabetical order.
        GUI setup methods must follow the listed conventions!
        Example:
            private void setMenuScreen() {...}
            private void setFinishScreen() {...}

            ///////////

            String setField(String input) {...}

        Private helper methods must have a message in their docstrings that says "Helper to {parent method name}"

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    Main method: public static void main(String[] args) {...}
        Only one class, the main application, is permitted to have a main method.
 }





Final Remarks
Curran Muhlburger is not allowed to contribute to any documentation in this project.